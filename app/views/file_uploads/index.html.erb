<h1>File Uploads</h1>
<%= form_with do |form| %>
  <%= form.file_field :file %>
<% end %>
<button id="deleteCache">Delete Cache</button>
<script>
  let db;
  const indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB,
        idbTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction,
        idbKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange
  
  const createIndexedDb = () => {
    const DBOpenRequest = window.indexedDB.open('Floorplan', 2);
    DBOpenRequest.onerror = () => console.log('error')
    DBOpenRequest.onsuccess = () => {
        console.log('cache loaded successfully')
        db = DBOpenRequest.result
    }
    DBOpenRequest.onupgradeneeded = (e) =>  {
        db = e.target.result;
        const store = db.createObjectStore('imgCache', {keyPath: 'name'})
        store.transaction.oncomplete = () => db.transaction('imgCache', 'readwrite').objectStore('imgCache')
    }
  }
  
  const cacheFile = (file, auditNum) => {
    const data = {
      name: file.name,
      file: file, 
      auditNum: auditNum
    }
    console.log(data)
    const tx = db.transaction('imgCache', 'readwrite')
    const store = tx.objectStore('imgCache')
    tx.onsuccess = () => {console.log('transaction created successfully')}
    tx.onerror = () => {console.log('transaction creation failed')}
  
    store.add(data)
    return tx.complete
  }
  
  const displayImagesFromCache = () => {
    const tx = db.transaction('imgCache', 'readonly')
    const store = tx.objectStore('imgCache')
    const cursorRequest = store.openCursor()
    cursorRequest.onsuccess = (e) => {
      const cursor = e.target.result
      if (cursor) {
        const imgFile = cursor.value.file
        const reader = new FileReader()
        reader.onload = () => {
          const dataURL = reader.result
          const imgElement = document.createElement('img')
          imgElement.id = imgFile.name
          imgElement.height, imgElement.width = 400
          imgElement.src = dataURL
          document.body.append(imgElement)
        }
        reader.readAsDataURL(imgFile)
  
        cursor.continue()
      }
    }
  }

  const clearCache = () => {
    const tx = db.transaction('imgCache', 'readwrite')
    const store = tx.objectStore('imgCache')
    const keysTx = store.getAllKeys()
    keysTx.onsuccess = (e) => {
      const keys = e.target.result
      keys.forEach(key => {
        store.delete(key)
      });
    }
  }
  
  window.onload = createIndexedDb()

  document.querySelector("#deleteCache").addEventListener("click", () => {
    clearCache()
  })
  
  document.forms[0].file.addEventListener("change", (e) => {
    cacheFile(e.target.files[0], Math.floor(Math.random() * 1000))
    displayImagesFromCache()
  })
</script>
